type ExerciseCategory {
  id: Int
  categoryId: Int!
  exerciseId: Int!
  category: Category!
}

type Exercise {
  id: Int!
  name: String!
  img: String
  categories: [ExerciseCategory!]!
}

input UserUniqueInput {
  id: Float
  email: String
}

type User {
  id: Int!
  email: String!
  name: String
}

type Category {
  id: Int!
  name: String!
  exercise: Exercise
}

type Exercise {
  id: Int!
  name: String!
  img: String
}

type ExerciseCategory {
  categoryId: Int!
  exerciseId: Int!
  category: Category!
}

type Exercise {
  id: Int!
  name: String!
  img: String
  categories: [ExerciseCategory!]!
}

type Training {
  id: Int
  type: String
  user: User
  exercise: Exercise
}

type Query {
  allUsers: [Training!]
}

input UserCreateInput {
  email: String!
  name: String
  password: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
}
