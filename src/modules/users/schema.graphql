input CreateUserInput {
  name: String
  email: String
  password: String
}
input CreateTrainingInput {
  userId: Int
  exercises: [CreateExerciseInput] # Usando um novo tipo de entrada para Exercise
  categories: [CreateCategoryToExerciseInput] # Usando um novo tipo de entrada para CategoryToExercise
}

input CreateExerciseInput {
  exerciseID: Int
  name: String
  img: String
  category: CreateCategoryToExerciseInput
}

input CreateCategoryToExerciseInput {
  categoryIdReference: Int
  exerciseIdReference: Int
}

type User {
  userId: Int!
  name: String
  email: String!
  password: String!
  trainings: [Training!]
}

type Category {
  categoryId: Int!
  name: String
  exercises: [CategoryToExercise!]
}

type Exercise {
  exerciseID: Int!
  name: String
  img: String
  category: [CategoryToExercise!]
}

type Training {
  id: Int!
  user: User!
  exercises: [TrainingToExercise!]
  categories: [TrainingToCategory]
}

type CategoryToExercise {
  categoryIdReference: Int!
  exerciseIdReference: Int!
  category: Category!
  exercise: Exercise!
}

type TrainingToExercise {
  training: Training!
  exercise: Exercise!
}

type TrainingToCategory {
  training: Training!
  category: Category!
}

type Query {
  user(userId: Int): User
}

type Mutation {
  createUser(data: CreateUserInput): User
  createTraining(data: CreateTrainingInput): Training
}
